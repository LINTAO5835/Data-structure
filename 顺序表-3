//#pragma warning(suppress : 4996)
#include<stdio.h>
#include<stdlib.h>
#include<conio.h>

#define maxsize 100				//表的最大空间，这里假设为100
struct Sqlist
{
	int data[maxsize];
	int length;
};

//顺序表的初始化
void Initlist(Sqlist& L)
{
	L.length = 0;				//给顺序表初始长度为0
}

//顺序表的赋值
void Assigment(Sqlist& L,int n)
{
	int i;
	printf("请为顺序表赋值（空格隔开）：");
	for (i = 0; i < n; i++)
	{
		scanf_s("%d", &L.data[i]);
		L.length++;
	}
}

//1.顺序表的插入
int Insertlist(Sqlist& L, int i, int x)//将新元素x插入到L所指的顺序表的第i个节点的位置上
{
	int j;
	if ((i < 1) || (i > L.length + 1)){	//非法位置，退出运行
		printf("插入的位置有误，无法插入！\n");
		return 0;
		//exit(0);
	}
	if (L.length == maxsize) {
		printf("当前顺序表的存储空间已满，无法插入！\n");
		return 0;
		//exit(0);
	}
	for (j = L.length - 1; j >= i - 1; j--)	//将插入位置之后的所有元素后移
		L.data[j + 1] = L.data[j];
	L.data[i - 1] = x;						//将新元素x放入到第i个位置上
	L.length++;								//表长加1
	return 1;
}

//2.顺序表的删除
int Deletelist(Sqlist& L, int i)
{
	int j;
	if ((i < 1) || (i > L.length)) {	//非法位置，退出运行
		printf("删除位置有误，无法删除！\n");
		return 0;
		//exit(0);
	}
	for (j = i; j <= L.length - 1; j++)	//被删除元素之后的元素前移
		L.data[j - 1] = L.data[j];

	L.length--;							//表长减1
	return 1;
}

//3.按值查找
int LocateElem(Sqlist& L, int e)	//在顺序表中查找值为e的数据元素，返回其序号
{
	int i;
	for (i = 0; i < L.length; i++) {
		if (L.data[i] == e)			//查找成功，返回序号i+1
			return i + 1;
	}
	return 0;				//查找失败，返回0	
}

//4.按序号查找
int Find(Sqlist& L, int i)
{
	if (i<1 || i>L.length)
		return 0;
	else
		return L.data[i - 1];
}
//5.求顺序表长度
int Listlength(Sqlist L)
{
	return L.length;
}

//顺序表的输出
void Printlist(Sqlist L)
{
	int i;
	printf("当前表中的元素为：");
	for (i = 0; i < L.length; i++)
		printf("%d ", L.data[i]);
	printf("\n\n");
}

void menu()
{
	system("cls");
	printf("\n");
	printf("                        顺序表的基本操作！               \n");
	printf("          ==============================================\n");	
	printf("          =            1、插入元素                     =\n");
	printf("          =            2、删除元素                     =\n");
	printf("          =            3、按值查找                     =\n");
	printf("          =            4、按序号查找                   =\n");
	printf("          =            5、求顺序表的长度               =\n");
	printf("          =            0、退出                         =\n");
	printf("          ==============================================\n");
	printf("请你要选择的操作<0-6>：                                  \n");
}





int main()
{
	Sqlist L;							//将L定义为Sqlist类型
	Initlist(L);						//顺序表的初始化
	int n, choose;
	char ch ;
	printf("请先给顺序表赋初值!\n");
	printf("请输入顺序表的长度：");
	scanf_s("%d", &n);
	Assigment(L, n);					//给顺序表赋初值
	Printlist(L);						//输出顺序表
	printf("请按任意键继续！");
	ch = _getch();

	
	do {
		menu();
		scanf_s("%d", &choose);

		switch (choose)
		{
		case 1: {
			int x, i;
			printf("请输入要插入的位置和插入的元素：");
			scanf_s("%d %d", &i, &x);
			Insertlist(L, i, x);				//插入
			Printlist(L);						//输出顺序表
			printf("请按任意键继续！");
			ch = _getch();
			break;
		}
		case 2: {
			int a;
			printf("请输入要删除的位置：");
			scanf_s("%d", &a);
			Deletelist(L, a);					//删除
			Printlist(L);						//输出顺序表
			printf("请按任意键继续！");
			ch = _getch();
			break;
		}
		case 3: {
			int e, m;
			printf("请输入要查找的值：");
			scanf_s("%d", &e);
			m = LocateElem(L, e);				//按值查找
			if (m)
				printf("%d的位置为：%d\n\n", e, m);
			else
				printf("查找失败！\n\n");
			printf("请按任意键继续！");
			ch = _getch();
			break;
		}
		case 4: {
			int j;
			printf("请输入要查找的序号：");
			scanf_s("%d", &j);
			if (Find(L, j))						//按序号查找
				printf("序号%d的值为：%d\n\n", j, Find(L, j));
			else
				printf("查找失败！\n\n");
			printf("请按任意键继续！");
			ch = _getch();
			break;
		}
		case 5: {
			printf("当前顺序表的长度为：%d\n\n", Listlength(L));
			printf("请按任意键继续！");
			ch = _getch();
			break;
		}
		case 0: {
			printf("欢迎使用！\n\n");
			printf("请按任意键退出！");
			ch = _getch();
			break;
		}
		default:
			printf("请重新输入！\n\n");
			printf("请按任意键继续！");
			ch = _getch();
			break;
		}

	} while (choose!=0);
	
	return 0;
}
